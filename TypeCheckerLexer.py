# Generated from TypeChecker.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,249,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,
        16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,5,25,182,8,25,10,25,12,25,185,9,25,1,26,1,26,5,
        26,189,8,26,10,26,12,26,192,9,26,1,27,1,27,1,27,5,27,197,8,27,10,
        27,12,27,200,9,27,1,28,1,28,5,28,204,8,28,10,28,12,28,207,9,28,1,
        28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,3,31,217,8,31,1,32,1,32,1,
        33,1,33,3,33,223,8,33,1,34,1,34,1,34,1,34,5,34,229,8,34,10,34,12,
        34,232,9,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,243,
        8,35,10,35,12,35,246,9,35,1,35,1,35,1,230,0,36,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,4,3,0,
        9,10,13,13,32,32,2,0,65,90,97,122,2,0,32,33,35,127,2,0,10,10,13,
        13,258,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,1,73,1,0,0,0,3,78,1,0,0,0,5,80,1,0,0,0,7,87,1,0,0,
        0,9,91,1,0,0,0,11,94,1,0,0,0,13,96,1,0,0,0,15,98,1,0,0,0,17,100,
        1,0,0,0,19,107,1,0,0,0,21,109,1,0,0,0,23,111,1,0,0,0,25,117,1,0,
        0,0,27,125,1,0,0,0,29,134,1,0,0,0,31,136,1,0,0,0,33,138,1,0,0,0,
        35,140,1,0,0,0,37,142,1,0,0,0,39,144,1,0,0,0,41,150,1,0,0,0,43,159,
        1,0,0,0,45,166,1,0,0,0,47,171,1,0,0,0,49,173,1,0,0,0,51,177,1,0,
        0,0,53,186,1,0,0,0,55,193,1,0,0,0,57,201,1,0,0,0,59,210,1,0,0,0,
        61,212,1,0,0,0,63,216,1,0,0,0,65,218,1,0,0,0,67,222,1,0,0,0,69,224,
        1,0,0,0,71,238,1,0,0,0,73,74,5,115,0,0,74,75,5,104,0,0,75,76,5,111,
        0,0,76,77,5,119,0,0,77,2,1,0,0,0,78,79,5,33,0,0,79,4,1,0,0,0,80,
        81,5,114,0,0,81,82,5,101,0,0,82,83,5,116,0,0,83,84,5,117,0,0,84,
        85,5,114,0,0,85,86,5,110,0,0,86,6,1,0,0,0,87,88,5,110,0,0,88,89,
        5,101,0,0,89,90,5,119,0,0,90,8,1,0,0,0,91,92,5,58,0,0,92,93,5,61,
        0,0,93,10,1,0,0,0,94,95,5,40,0,0,95,12,1,0,0,0,96,97,5,44,0,0,97,
        14,1,0,0,0,98,99,5,41,0,0,99,16,1,0,0,0,100,101,5,109,0,0,101,102,
        5,101,0,0,102,103,5,116,0,0,103,104,5,104,0,0,104,105,5,111,0,0,
        105,106,5,100,0,0,106,18,1,0,0,0,107,108,5,123,0,0,108,20,1,0,0,
        0,109,110,5,125,0,0,110,22,1,0,0,0,111,112,5,99,0,0,112,113,5,108,
        0,0,113,114,5,97,0,0,114,115,5,115,0,0,115,116,5,115,0,0,116,24,
        1,0,0,0,117,118,5,105,0,0,118,119,5,110,0,0,119,120,5,104,0,0,120,
        121,5,101,0,0,121,122,5,114,0,0,122,123,5,105,0,0,123,124,5,116,
        0,0,124,26,1,0,0,0,125,126,5,116,0,0,126,127,5,101,0,0,127,128,5,
        109,0,0,128,129,5,112,0,0,129,130,5,108,0,0,130,131,5,97,0,0,131,
        132,5,116,0,0,132,133,5,101,0,0,133,28,1,0,0,0,134,135,5,46,0,0,
        135,30,1,0,0,0,136,137,5,43,0,0,137,32,1,0,0,0,138,139,5,45,0,0,
        139,34,1,0,0,0,140,141,5,42,0,0,141,36,1,0,0,0,142,143,5,47,0,0,
        143,38,1,0,0,0,144,145,5,99,0,0,145,146,5,104,0,0,146,147,5,117,
        0,0,147,148,5,110,0,0,148,149,5,107,0,0,149,40,1,0,0,0,150,151,5,
        102,0,0,151,152,5,114,0,0,152,153,5,97,0,0,153,154,5,99,0,0,154,
        155,5,116,0,0,155,156,5,105,0,0,156,157,5,111,0,0,157,158,5,110,
        0,0,158,42,1,0,0,0,159,160,5,115,0,0,160,161,5,116,0,0,161,162,5,
        114,0,0,162,163,5,105,0,0,163,164,5,110,0,0,164,165,5,103,0,0,165,
        44,1,0,0,0,166,167,5,110,0,0,167,168,5,111,0,0,168,169,5,110,0,0,
        169,170,5,101,0,0,170,46,1,0,0,0,171,172,5,36,0,0,172,48,1,0,0,0,
        173,174,7,0,0,0,174,175,1,0,0,0,175,176,6,24,0,0,176,50,1,0,0,0,
        177,183,3,59,29,0,178,182,3,59,29,0,179,182,3,63,31,0,180,182,5,
        95,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,185,1,
        0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,52,1,0,0,0,185,183,1,0,
        0,0,186,190,3,61,30,0,187,189,3,63,31,0,188,187,1,0,0,0,189,192,
        1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,54,1,0,0,0,192,190,1,
        0,0,0,193,194,3,53,26,0,194,198,5,46,0,0,195,197,3,63,31,0,196,195,
        1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,56,1,
        0,0,0,200,198,1,0,0,0,201,205,5,34,0,0,202,204,3,65,32,0,203,202,
        1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,
        1,0,0,0,207,205,1,0,0,0,208,209,5,34,0,0,209,58,1,0,0,0,210,211,
        7,1,0,0,211,60,1,0,0,0,212,213,2,49,57,0,213,62,1,0,0,0,214,217,
        5,48,0,0,215,217,3,61,30,0,216,214,1,0,0,0,216,215,1,0,0,0,217,64,
        1,0,0,0,218,219,7,2,0,0,219,66,1,0,0,0,220,223,3,65,32,0,221,223,
        5,34,0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,68,1,0,0,0,224,225,
        5,47,0,0,225,226,5,42,0,0,226,230,1,0,0,0,227,229,9,0,0,0,228,227,
        1,0,0,0,229,232,1,0,0,0,230,231,1,0,0,0,230,228,1,0,0,0,231,233,
        1,0,0,0,232,230,1,0,0,0,233,234,5,42,0,0,234,235,5,47,0,0,235,236,
        1,0,0,0,236,237,6,34,1,0,237,70,1,0,0,0,238,239,5,47,0,0,239,240,
        5,47,0,0,240,244,1,0,0,0,241,243,8,3,0,0,242,241,1,0,0,0,243,246,
        1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,244,
        1,0,0,0,247,248,6,35,1,0,248,72,1,0,0,0,10,0,181,183,190,198,205,
        216,222,230,244,2,6,0,0,0,1,0
    ]

class TypeCheckerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    Whitespace = 25
    Identifier = 26
    ChunkLiteral = 27
    FractionLiteral = 28
    StringLiteral = 29
    Letter = 30
    NonZeroDigit = 31
    Digit = 32
    CharacterExceptQuote = 33
    Character = 34
    BlockComment = 35
    LineComment = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'show'", "'!'", "'return'", "'new'", "':='", "'('", "','", 
            "')'", "'method'", "'{'", "'}'", "'class'", "'inherit'", "'template'", 
            "'.'", "'+'", "'-'", "'*'", "'/'", "'chunk'", "'fraction'", 
            "'string'", "'none'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "Whitespace", "Identifier", "ChunkLiteral", "FractionLiteral", 
            "StringLiteral", "Letter", "NonZeroDigit", "Digit", "CharacterExceptQuote", 
            "Character", "BlockComment", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "Whitespace", "Identifier", 
                  "ChunkLiteral", "FractionLiteral", "StringLiteral", "Letter", 
                  "NonZeroDigit", "Digit", "CharacterExceptQuote", "Character", 
                  "BlockComment", "LineComment" ]

    grammarFileName = "TypeChecker.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


