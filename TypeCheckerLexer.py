# Generated from TypeChecker.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,256,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,
        24,1,24,1,25,1,25,1,25,1,25,5,25,184,8,25,10,25,12,25,187,9,25,1,
        26,1,26,1,26,3,26,192,8,26,1,27,1,27,5,27,196,8,27,10,27,12,27,199,
        9,27,1,28,1,28,1,28,5,28,204,8,28,10,28,12,28,207,9,28,1,29,1,29,
        5,29,211,8,29,10,29,12,29,214,9,29,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,3,32,224,8,32,1,33,1,33,1,34,1,34,3,34,230,8,34,1,35,1,
        35,1,35,1,35,5,35,236,8,35,10,35,12,35,239,9,35,1,35,1,35,1,35,1,
        35,1,35,1,36,1,36,1,36,1,36,5,36,250,8,36,10,36,12,36,253,9,36,1,
        36,1,36,1,237,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,1,0,4,3,0,9,10,13,13,32,32,2,0,65,
        90,97,122,2,0,32,33,35,127,2,0,10,10,13,13,267,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,1,75,1,0,0,0,3,80,1,0,0,0,5,82,1,0,0,0,7,89,1,0,0,0,9,93,1,0,
        0,0,11,96,1,0,0,0,13,98,1,0,0,0,15,100,1,0,0,0,17,102,1,0,0,0,19,
        109,1,0,0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,119,1,0,0,0,27,127,
        1,0,0,0,29,136,1,0,0,0,31,138,1,0,0,0,33,140,1,0,0,0,35,142,1,0,
        0,0,37,144,1,0,0,0,39,146,1,0,0,0,41,152,1,0,0,0,43,161,1,0,0,0,
        45,168,1,0,0,0,47,173,1,0,0,0,49,175,1,0,0,0,51,179,1,0,0,0,53,191,
        1,0,0,0,55,193,1,0,0,0,57,200,1,0,0,0,59,208,1,0,0,0,61,217,1,0,
        0,0,63,219,1,0,0,0,65,223,1,0,0,0,67,225,1,0,0,0,69,229,1,0,0,0,
        71,231,1,0,0,0,73,245,1,0,0,0,75,76,5,115,0,0,76,77,5,104,0,0,77,
        78,5,111,0,0,78,79,5,119,0,0,79,2,1,0,0,0,80,81,5,33,0,0,81,4,1,
        0,0,0,82,83,5,114,0,0,83,84,5,101,0,0,84,85,5,116,0,0,85,86,5,117,
        0,0,86,87,5,114,0,0,87,88,5,110,0,0,88,6,1,0,0,0,89,90,5,110,0,0,
        90,91,5,101,0,0,91,92,5,119,0,0,92,8,1,0,0,0,93,94,5,58,0,0,94,95,
        5,61,0,0,95,10,1,0,0,0,96,97,5,40,0,0,97,12,1,0,0,0,98,99,5,44,0,
        0,99,14,1,0,0,0,100,101,5,41,0,0,101,16,1,0,0,0,102,103,5,109,0,
        0,103,104,5,101,0,0,104,105,5,116,0,0,105,106,5,104,0,0,106,107,
        5,111,0,0,107,108,5,100,0,0,108,18,1,0,0,0,109,110,5,123,0,0,110,
        20,1,0,0,0,111,112,5,125,0,0,112,22,1,0,0,0,113,114,5,99,0,0,114,
        115,5,108,0,0,115,116,5,97,0,0,116,117,5,115,0,0,117,118,5,115,0,
        0,118,24,1,0,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,122,5,104,
        0,0,122,123,5,101,0,0,123,124,5,114,0,0,124,125,5,105,0,0,125,126,
        5,116,0,0,126,26,1,0,0,0,127,128,5,116,0,0,128,129,5,101,0,0,129,
        130,5,109,0,0,130,131,5,112,0,0,131,132,5,108,0,0,132,133,5,97,0,
        0,133,134,5,116,0,0,134,135,5,101,0,0,135,28,1,0,0,0,136,137,5,46,
        0,0,137,30,1,0,0,0,138,139,5,43,0,0,139,32,1,0,0,0,140,141,5,45,
        0,0,141,34,1,0,0,0,142,143,5,42,0,0,143,36,1,0,0,0,144,145,5,47,
        0,0,145,38,1,0,0,0,146,147,5,99,0,0,147,148,5,104,0,0,148,149,5,
        117,0,0,149,150,5,110,0,0,150,151,5,107,0,0,151,40,1,0,0,0,152,153,
        5,102,0,0,153,154,5,114,0,0,154,155,5,97,0,0,155,156,5,99,0,0,156,
        157,5,116,0,0,157,158,5,105,0,0,158,159,5,111,0,0,159,160,5,110,
        0,0,160,42,1,0,0,0,161,162,5,115,0,0,162,163,5,116,0,0,163,164,5,
        114,0,0,164,165,5,105,0,0,165,166,5,110,0,0,166,167,5,103,0,0,167,
        44,1,0,0,0,168,169,5,110,0,0,169,170,5,111,0,0,170,171,5,110,0,0,
        171,172,5,101,0,0,172,46,1,0,0,0,173,174,5,36,0,0,174,48,1,0,0,0,
        175,176,7,0,0,0,176,177,1,0,0,0,177,178,6,24,0,0,178,50,1,0,0,0,
        179,185,3,61,30,0,180,184,3,61,30,0,181,184,3,65,32,0,182,184,5,
        95,0,0,183,180,1,0,0,0,183,181,1,0,0,0,183,182,1,0,0,0,184,187,1,
        0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,52,1,0,0,0,187,185,1,0,
        0,0,188,192,3,55,27,0,189,192,3,57,28,0,190,192,3,59,29,0,191,188,
        1,0,0,0,191,189,1,0,0,0,191,190,1,0,0,0,192,54,1,0,0,0,193,197,3,
        63,31,0,194,196,3,65,32,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,
        1,0,0,0,197,198,1,0,0,0,198,56,1,0,0,0,199,197,1,0,0,0,200,201,3,
        55,27,0,201,205,5,46,0,0,202,204,3,65,32,0,203,202,1,0,0,0,204,207,
        1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,58,1,0,0,0,207,205,1,
        0,0,0,208,212,5,34,0,0,209,211,3,67,33,0,210,209,1,0,0,0,211,214,
        1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,
        1,0,0,0,215,216,5,34,0,0,216,60,1,0,0,0,217,218,7,1,0,0,218,62,1,
        0,0,0,219,220,2,49,57,0,220,64,1,0,0,0,221,224,5,48,0,0,222,224,
        3,63,31,0,223,221,1,0,0,0,223,222,1,0,0,0,224,66,1,0,0,0,225,226,
        7,2,0,0,226,68,1,0,0,0,227,230,3,67,33,0,228,230,5,34,0,0,229,227,
        1,0,0,0,229,228,1,0,0,0,230,70,1,0,0,0,231,232,5,47,0,0,232,233,
        5,42,0,0,233,237,1,0,0,0,234,236,9,0,0,0,235,234,1,0,0,0,236,239,
        1,0,0,0,237,238,1,0,0,0,237,235,1,0,0,0,238,240,1,0,0,0,239,237,
        1,0,0,0,240,241,5,42,0,0,241,242,5,47,0,0,242,243,1,0,0,0,243,244,
        6,35,1,0,244,72,1,0,0,0,245,246,5,47,0,0,246,247,5,47,0,0,247,251,
        1,0,0,0,248,250,8,3,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,
        1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,
        6,36,1,0,255,74,1,0,0,0,11,0,183,185,191,197,205,212,223,229,237,
        251,2,6,0,0,0,1,0
    ]

class TypeCheckerLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    Whitespace = 25
    Identifier = 26
    Literal = 27
    ChunkLiteral = 28
    FractionLiteral = 29
    StringLiteral = 30
    Letter = 31
    NonZeroDigit = 32
    Digit = 33
    CharacterExceptQuote = 34
    Character = 35
    BlockComment = 36
    LineComment = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'show'", "'!'", "'return'", "'new'", "':='", "'('", "','", 
            "')'", "'method'", "'{'", "'}'", "'class'", "'inherit'", "'template'", 
            "'.'", "'+'", "'-'", "'*'", "'/'", "'chunk'", "'fraction'", 
            "'string'", "'none'", "'$'" ]

    symbolicNames = [ "<INVALID>",
            "Whitespace", "Identifier", "Literal", "ChunkLiteral", "FractionLiteral", 
            "StringLiteral", "Letter", "NonZeroDigit", "Digit", "CharacterExceptQuote", 
            "Character", "BlockComment", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "Whitespace", "Identifier", 
                  "Literal", "ChunkLiteral", "FractionLiteral", "StringLiteral", 
                  "Letter", "NonZeroDigit", "Digit", "CharacterExceptQuote", 
                  "Character", "BlockComment", "LineComment" ]

    grammarFileName = "TypeChecker.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


